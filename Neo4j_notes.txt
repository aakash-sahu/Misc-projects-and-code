docker run \
	--detach \
	--publish=7474:7474 --publish=7687:7687 \
    --volume=$HOME/neo4j/data:/data \
    --volume=$HOME/neo4j/logs:/logs \
	--volume=$HOME/neo4j/import:/import \
    --env NEO4J_AUTH=none \
    --env=NEO4J_dbms_memory_pagecache_size=4G \
	--env=NEO4J_dbms_memory_heap_max__size=2G \
	neo4j
	
	
LOAD CSV FROM "file:///us_ofac_100.csv" AS row
RETURN row
LIMIT 1;	

#Delete DB
docker exec 636 rm -rf data/databases/graph.db


Any configuration value (see Section A.1, “Configuration settings”) can be passed using the following naming scheme:

Prefix with NEO4J_.
Underscores must be written twice: _ is written as __.
Periods are converted to underscores: . is written as _.


docker run \
	--detach \
	--publish=7474:7474 --publish=7687:7687 \
	--volume=$HOME/neo4j/import:/import \
    --env NEO4J_AUTH=none \
    --env=NEO4J_dbms_memory_pagecache_size=4G \
	--env=NEO4J_dbms_memory_heap_max__size=2G \
	neo4j
	
	
	
docker run \
 --detach \
 --publish=7575:7474 --publish=7688:7687 \
 --env NEO4J_AUTH=none \
 ryguyrg/neo4j-panama-papers
 
 
 docker run \
	--detach \
	--publish=7474:7474 --publish=7687:7687 \
	--volume=$HOME/neo4j/import:/import \
    --env NEO4J_AUTH=none \
    --env=NEO4J_dbms_memory_pagecache_size=4G \
	--env=NEO4J_dbms_memory_heap_max__size=2G \
	neo4j

	
docker run \
	--detach \
	--publish=7474:7474 --publish=7687:7687 \
    --env NEO4J_AUTH=none \
    --env=NEO4J_dbms_memory_pagecache_size=4G \
	--env=NEO4J_dbms_memory_heap_max__size=2G \
	--env=NEO4J_dbms_active__database=frauddemo \
	graphdb-fraud

docker run \
	--detach \
	--publish=7475:7474 --publish=7688:7687 \
	--volume=$HOME/neo4j/data:/data \
    --env NEO4J_AUTH=none \
	graphdb-fraud	
	
	
docker run --rm -d -p 5000:5000 92b4
docker run --rm -d -p 5001:5000 e315

##to start the neo-4j container with matt's data after copying the data into folder
#dockerfile
FROM neo4j:latest

#RUN apt-get update && apt-get install -y --no-install-recommends \
#&& rm -rf /var/lib/apt/lists/*

COPY frauddemo /data/databases/frauddemo

#docker run command
docker run \
--detach \
--publish=7474:7474 --publish=7687:7687 \
    --env NEO4J_AUTH=none \
    --env=NEO4J_dbms_memory_pagecache_size=4G \
--env=NEO4J_dbms_memory_heap_max__size=2G \
--env=NEO4J_dbms_active__database=frauddemo \
graphdb-fraud



##CODE
## To see what the headers are
LOAD CSV FROM "http://ia902807.s3dns.us.archive.org/opensanctions/us_ofac.csv" AS row
RETURN row
LIMIT 1;

## Providing unique constraint on each node
CREATE CONSTRAINT ON (o:OFAC) ASSERT o.OFACId IS UNIQUE;
CREATE CONSTRAINT ON (s:Summary) ASSERT s.OFACId IS UNIQUE;
CREATE CONSTRAINT ON (t:TypeOfOFAC) ASSERT t.OFACId IS UNIQUE;
CREATE CONSTRAINT ON (p:Program) ASSERT p.OFACId IS UNIQUE;
CREATE CONSTRAINT ON (f:Function) ASSERT f.OFACId IS UNIQUE;


## Loading the CSV file
USING PERIODIC COMMIT 200
LOAD CSV FROM "http://ia902807.s3dns.us.archive.org/opensanctions/us_ofac.csv" AS row;

## Creating nodes
CREATE (ofac:OFAC {OFACId: row[5], Name: row[13]})
CREATE (summary:Summary {OFACId: row[5], Summary: row[16]})
CREATE (type:TypeOfOFAC {OFACId: row[5], Type: row[10]})
CREATE (program:Program {OFACId: row[5], Program: row[9]})
CREATE (function:Function {OFACId: row[5], Function: row[11]})


## Creating realtionships
OPTIONAL MATCH (o:OFAC),(s:Summary),(p:Program),(t:TypeOfOFAC)
WHERE o.OFACId = s.OFACId AND o.OFACId = p.OFACId AND o.OFACId = t.OFACId
CREATE (o)-[rs:HAS_SUMMARY]->(s)
CREATE (o)-[rp:IS_PART_OF]->(p)
CREATE (o)-[rt:IS_TYPE]->(t)
RETURN o,s,p,t,rs,rp,rt


MATCH (f:Function),(t:TypeOfOFAC)
WHERE t.Type = "individual"
CREATE (t)-[ri:IS_INDIVIDUAL_WITH_ROLE]->(f)
RETURN f,t,ri



OPTIONAL MATCH (f:Function)
WITH f
OPTIONAL MATCH (t:TypeOfOFAC)
WHERE t.Type = "individual"
CREATE (t)-[r:IS_INDIVIDUAL_WITH_ROLE]->(f)
RETURN f,t,r

 

